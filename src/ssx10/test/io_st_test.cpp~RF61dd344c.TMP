#include "io_st_test.h"

#include <string>
#include <iostream>

#include <boost/log/trivial.hpp>
#include <boost/shared_ptr.hpp>

#include "../io/win32/ssx_io.h"
#include "../utils/hex.h"

namespace ssx {
	namespace testing {
		typedef boost::shared_ptr<ssx::io::win32::HandleWrapper> HandleWrapperPtr;

		static std::string packet_template_chip_b_0x43 = "01000500431000000000000003404883122957145088f211";
		static std::string packet_template_chip_a_0x54 = "000002005499001ec4f4225d888d03cdea4b52506a5601000000000000000000000000000000000000000000034048831229571450883120170618000001230000000000000999b0543d90b1000000a5bb08043e964eec635828ea53a0386fad0ac82e3b616ef084851956709730f9045269aaacab6e517ab49abe5624cb24be631e75c7f5f6d94b64b418e5d11c52ab5faa270f66503398df693fd51b65a437a6";
		void print_run_io_mt_test_help() {
			std::cout << " ================================================================= " << std::endl;
			std::cout << "本程序的测试流程:程序预先生成若干测试样本数据,然后在轮流执行IO请求,检查响应数据是否符合预期结果" << std::endl;
			std::cout << "命令行:ssxtester <second> <threads> <dynamic_req> " << std::endl;
			std::cout << "参数 second :最大测试时间,单位秒" << std::endl;
			std::cout << "参数 dynamic_req :是否允许动态请求采样, y表示开启.如果关闭,总是发送相同的数据" << std::endl;
			std::cout << "例子:ssxtester 60  y " << std::endl;
			std::cout << " ================================================================= " << std::endl;
		}

		void run_io_st_test(unsigned int seconds, bool dynamic_req) {

			BOOST_LOG_TRIVIAL(info) << "准备测试, second = " << seconds << ",dynamic_req = " << (dynamic_req ? "Y" : "N");

		}
		void print_run_io_st_test_help() {
			//
		}
	}
}